//KEEPER_2_PIXY
#include "D_Main.h"
#include "D_I2C.h"
#include "D_SIO.h"
#include "D_EIO.h"





//MOTOR
  //現在の出力
  int M0;
  int M1;
  int M2;
  int M3;

  //出力目標値
  int I;
  int J;
  int K;
  int L;

  //出力レベル
  int MP;//motorpower
  int LMP;//linemotorpower
  int MPlus;//比例足す値
  
  //シュート
  int goaldistance;
  float goalgain;

//DIR
  int A;//出力
  int B;//偏差の微分
  int C;//操作量C
  int N;//微分ゲイン
  float O;//操作量Aを割る定数
  int P;//比例ゲイン
  int V;//微分用の今回偏差の保存
  int X;//攻め方向と現在の向きの差
  int Y;//開始時攻め方向
  int Z;//現在の向き
  int Smalldiff;//許容誤差
  int pixy;//0で普通のDIR, 1でPIXYDIR
  int nopixy;//1でpixyを無視
  int side;//1でゴールの端にいる
  int lastpixy;//最後に見たpixyの値
  int centerdiff;
  int centerfunction;
  float DIRPlus;


//BALL
  int list[8];//ボルセン配列
  int max_index;//最大ボルセンindex
  int max_value;//最大ボルセン値
  int i;//for文
  int j;
  int k;

  int lineoff;
  int cameraoff;






int DIR(void)
{
  DIRPlus = 0;
  while(TRUE){
    N = 40;//微分ゲイン
    P = 3;//比例ゲイン
    O = 4;//操作量Aを割る定数
    Z = get_bno(0);
    X = Z - Y;
    if(X > 180){
      X = X - 360;
    }else if(X < -180){
       X = X + 360;
    }
    if(X > -1 * Smalldiff && X < Smalldiff){
      break;
    }else{
      B = V - X;
      V = X;
      A = P * X;
      C = N * B;
      DIRPlus = X * 0.15 + DIRPlus;
      A = A - C + DIRPlus;
      A = A / O;
      if(A < -100){
        A = -100;//操作量下限値
      }else if(A > 100){
        A = 100;//操作量上限値
      }
      /*if(A > 0 && A < 25){
        A = 25;
      }else if(A < 0 && A > -25){
        A = -25;
      }*/
      gPwm[0] = A < 0 ? (A * -1) : A | 0x80;  
      gPwm[1] = A < 0 ? (A * -1) : A | 0x80;
      gPwm[2] = A < 0 ? (A * -1) : A | 0x80; 
      gPwm[3] = A < 0 ? (A * -1) : A | 0x80;  
      pwm_out();
      wait_ms(1);
    }
  }
}




int LINEMOTOR(void){
    set_Led(1, LED_ON);
    Smalldiff = 15;
    DIR();
    for(k = 0; k < 20; k++){
    gPwm[0] = I < 0 ? (I * -1) | 0x80 : I;
    gPwm[1] = J < 0 ? (J * -1) | 0x80 : J;
    gPwm[2] = K < 0 ? (K * -1) | 0x80 : K;
    gPwm[3] = L < 0 ? (L * -1) | 0x80 : L;
    pwm_out();
    wait_ms(1);
    }
    return;
}


int LINE_MAIN(void){
  if (sub_io_get_gV(1, VAR_M) >= 100 && lineoff == 0 && max_index != 0) {
    clr_timer(2);
    set_Led(1, LED_ON);
    return 0;
  }
  if (sub_io_get_gV(1, VAR_N) >= 200) {
    clr_timer(2);
    set_Led(1, LED_ON);
    return 1;
  }
  if (sub_io_get_gV(1, VAR_O) >= 100) {
    clr_timer(2);
    set_Led(1, LED_ON);
    return 2;
  }
  if (sub_io_get_gV(1, VAR_P) >= 200) {
    clr_timer(2);
    set_Led(1, LED_ON);
    return 3;
  }else{
    set_Led(1, LED_OFF);
    return 4;
  }
}





/*
void PIXYDIR(void){
  while(TRUE){
    set_Led(1, LED_ON);
    if(get_pixydat_x(1) == 0){
      Smalldiff = 10;
      DIR();
      I = 30;
      J = 30;
      K = 30;
      L = 30;
      break;
    }else{
      clr_timer(0);//見えてたらリセット
    }
    N = 40;//微分ゲイン
    P = 2;//比例ゲイン
    O = 5;//操作量Aを割る定数
    X = 160 - get_pixydat_x(1);
    if(X > 180){
      X = X - 360;
    }else if(X < -180){
       X = X + 360;
    }
    if(X > -1 * Smalldiff && X < Smalldiff){
      break;
    }else{
      B = V - X;
      V = X;
      A = P * X;
      C = N * B;
      A = A - C;
      A = A / O;
      if(A < -100){
        A = -100;//操作量下限値
      }else if(A > 100){
        A = 100;//操作量上限値
      }
      if(A > 0 && A < 25){
        A = 25;
      }else if(A < 0 && A > -25){
        A = -25;
      }
      gPwm[0] = A < 0 ? (A * -1) : A | 0x80;  
      gPwm[1] = A < 0 ? (A * -1) : A | 0x80;
      gPwm[2] = A < 0 ? (A * -1) : A | 0x80; 
      gPwm[3] = A < 0 ? (A * -1) : A | 0x80;  
      pwm_out();
      wait_ms(1);
    }
  }
}

*/





int BALL(void){
  list[0] = gAD[CN1];
  list[1] = gAD[CN2];
  list[2] = gAD[CN3];
  list[3] = gAD[CN4];
  list[4] = gAD[CN5];
  list[5] = gAD[CN6];
  list[6] = gAD[CN7];
  list[7] = gAD[CN8];
  if(list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7] <= 10){
    return 8;
  }
  max_value = list[0];
  max_index = 0;
  for (i = 0; i < 8; i++) {
    if (list[i] > max_value) {
      max_value = list[i];
      max_index = i;
    }
  }
  return max_index;
}





int MOTOR(void){
  if(I == M0 || M0 - I <= 20){
    M0 = I;
  }else{
    M0 = I/2;
  }
  if(J == M1 || M1 - J <= 20){
    M1 = J;   
  }else{
    M1 = J/2;
  }
  if(K == M2 || M2 - K <= 20){
    M2 = K;
  }else{
    M2 = K/2;
  }
  if(L == M3 || M3 - L <= 20){
    M3 = L;
  }else{
    M3 = L/2;
  }
  while (TRUE){
    gPwm[0] = M0 < 0 ? (M0 * -1) : M0 | 0x80;
    gPwm[1] = M1 < 0 ? (M1 * -1) : M1 | 0x80;
    gPwm[2] = M2 < 0 ? (M2 * -1) | 0x80 : M2;
    gPwm[3] = M3 < 0 ? (M3 * -1) | 0x80 : M3;
    pwm_out();
    wait_ms(1);
    if(I >= 0)//比例制御↓
      M0 = M0 < I ? (M0 + MPlus) : I;
    else
      M0 = M0 > I ? (M0 - MPlus) : I;
    if(J >= 0)
      M1 = M1 < J ? (M1 + MPlus) : J;
    else
      M1 = M1 > J ? (M1 - MPlus) : J;
    if(K >= 0)
      M2 = M2 < K ? (M2 + MPlus) : K;
    else
      M2 = M2 > K ? (M2 - MPlus) : K;
    if(L >= 0)
      M3 = M3 < L ? (M3 + MPlus) : L;
    else
      M3 = M3 > L ? (M3 - MPlus) : L;
    switch(LINE_MAIN()){
      case 0:
        if(side == 1 || side == 2){
          break;
        }else{
          I = LMP * -1;
          J = LMP * -1;
          K = LMP * -1;
          L = LMP * -1;
          M0 = I/2;
          M1 = J/2;
          M2 = K/2;
          M3 = L/2;
          break;
        }
      case 1:
        break;
      case 2:
        I = M0 = LMP;
        J = M1 = LMP;
        K = M2 = LMP;
        L = M3 = LMP;
        M0 = I/2;
        M1 = J/2;
        M2 = K/2;
        M3 = L/2;
        break;
      case 3:
        break;
    }
    if(I >= 0 && J >= 0){//目標値に到達↓
      if(M0 >= I && M1 >= J && M2 >= K && M3 >= L)
        break;
    }else if(I >= 0 && J < 0){
      if(M0 >= I && J >= M1 && M2 >= K && L >= M3)
        break;
    }else if(I < 0 && J >= 0){
      if(I >= M0 && M1 >= J && K >= M2 && M3 >= L)
        break;
    }else if(I < 0 && J < 0){
      if(I >= M0 && J >= M1 && K >= M2 && L >= M3)
        break;
    }
  }
}





void SHOOT(void){
  M0 = MP;
  M1 = MP * 1.1;
  M2 = MP * 1.2;
  M3 = MP;
  if(side == 1){
    M1 = M1 - 40;
    M3 = M3 - 40;
  }else if(side == 2){
    M0 = M0 - 8;
    M2 = M2 - 8;
  }
  gPwm[0] = M0 < 0 ? (M0 * -1) : M0 | 0x80;
  gPwm[1] = M1 < 0 ? (M1 * -1) : M1 | 0x80;
  gPwm[2] = M2 < 0 ? (M2 * -1) | 0x80 : M2;
  gPwm[3] = M3 < 0 ? (M3 * -1) | 0x80 : M3;
  pwm_out();
  wait_ms(800);
  if(sub_io_get_gV(1, VAR_M) >= 50 || sub_io_get_gV(1, VAR_N) >= 150 || sub_io_get_gV(1, VAR_O) >= 50 || sub_io_get_gV(1, VAR_P) >= 150){
    M0 = 0;
    M1 = 0;
    M2 = 0;
    M3 = 0;
  }else{
    M0 = MP * -1;
    M1 = MP * -1.1;
    M2 = MP * -1.25;
    M3 = MP * -1;
  }
  for(j = 0; j < 1; j++){
    gPwm[0] = M0 < 0 ? (M0 * -1) : M0 | 0x80;
    gPwm[1] = M1 < 0 ? (M1 * -1) : M1 | 0x80;
    gPwm[2] = M2 < 0 ? (M2 * -1) | 0x80 : M2;
    gPwm[3] = M3 < 0 ? (M3 * -1) | 0x80 : M3;
    pwm_out();
    wait_ms(600);
  }
  return;
}


  
  
  
void CENTER(void){
        if(get_timer(T3) >= 1000L && max_index != 3 && max_index != 4 && max_index != 5 && side == 0 && centerfunction == 0){
          cameraoff = 1;
          I = -70 + goaldistance;
          J = -70 + goaldistance;
          K = -70 + goaldistance;
          L = -70 + goaldistance;
        }
        centerfunction = 1;
        centerdiff = 160 - get_pixydat_x(1);
        if(-30 <= centerdiff && centerdiff <= 30){
          return;
        }else{
          centerdiff = centerdiff * 0.5;
          if(0 <= centerdiff && centerdiff <= 35){
            centerdiff = 35;
          }else if(-35 <= centerdiff && centerdiff <= 0){
            centerdiff = -35;
          }
          I = centerdiff;
          J = -1 * centerdiff;
          K = centerdiff;
          L = -1 * centerdiff;
          return;
        }
}


void user_main(void)
{
  Y = get_bno(0);
  MP = 80;//モーターの出力
  LMP = 70;//ライン出力
  MPlus = 15;
  pixy = 1;
  nopixy = 0;
  side = 0;
  goalgain = 0.1;
  if(sub_io_get_gV(1, VAR_A) == 1){
    nopixy = 1;//pixyを無視
  }else{
    nopixy = 0;
  }
  clr_timer(2);
  while(TRUE){
    centerfunction = 0;
    cameraoff = 0;
    if(get_timer(T1) > 3000L){
      nopixy = 1;//pixyを無視
    }
    Smalldiff = 40;
    goaldistance = 320 * goalgain - get_pixydat_x(1) * goalgain;
    Z = get_bno(0);
    X = Z - Y;
    if(X > 180){
      X = X - 360;
    }else if(X < -180){
       X = X + 360;
    }
    /*if(X > 30 || X < -30){
      side = 1;
    }else {
      side = 0;
    }*/
    if(get_pixydat_x(1) <= 70 && get_pixydat_x(1) != 0 && cameraoff == 0){
      side = 1;
    }else if(get_pixydat_x(1) >= 250  && cameraoff == 0){
      side = 2;
    }else{
      side = 0;
    }
    if(get_pixydat_x(1) > 0 && get_pixydat_x(1) <= 160){
      lastpixy = 1;
    }else if(get_pixydat_x(1) > 160 && get_pixydat_x(1) <= 320){
      lastpixy = 2;
    }
    switch(BALL()){
      case 0://前
        if(gAD[CN1] < 850){
          CENTER();
          break;
        }else if(get_timer(T2) >= 2000L && gAD[CN1] >= 850){
          SHOOT();
        }else{
          I = 0;
          J = 0;
          K = 0;
          L = 0;
          break;
        }   
      case 1://右前
        clr_timer(1);
        if(side == 2){
          I = 0;
          J = 0;
          K = 0;
          L = 0;
          break;
        }else{
          I = MP;
          J = MP * -1;
          K = MP;
          L = MP * -1;
          break;
        }
      case 2://右
        clr_timer(1);
        if(side == 2){
          I = 0;
          J = 0;
          K = 0;
          L = 0;
          break;
        }else{
          I = MP;
          J = MP * -1;
          K = MP;
          L = MP * -1;
          break;
        }
      case 3://右後
        clr_timer(1);
        if(side == 2 || gAD[CN4] >= 550){
          I = 0;
          J = 0;
          K = 0;
          L = 0;
          break;
        }else{
          I = MP;
          J = MP * -1;
          K = MP;
          L = MP * -1;
          break;
        }
      case 4://後
        clr_timer(1);
        if(side == 2){
        I = -1 * MP;
        J = MP;
        K = -1 * MP;
        L = MP;
        break;
        }else if(side == 1){
          I = MP;
          J = -1 * MP;
          K = MP;
          L = -1 * MP ;
          break;
        }
      case 5://左後
        clr_timer(1);
        if(side == 1 || gAD[CN6] >= 550){
          I = 0;
          J = 0;
          K = 0;
          L = 0;
          break;
        }else{
          I = MP * -1;
          J = MP;
          K = MP * -1;
          L = MP;
          break;
        }
      case 6://左
        clr_timer(1);
        if(side == 1){
          I = 0;
          J = 0;
          K = 0;
          L = 0;
          break;
        }else{
          I = MP * -1;
          J = MP;
          K = MP * -1;
          L = MP;
          break;
        }
      case 7://左前
        clr_timer(1);
        if(side == 1){
          I = 0;
          J = 0;
          K = 0;
          L = 0;
          break;
        }else{
          I = MP * -1;
          J = MP;
          K = MP * -1;
          L = MP;
          break;
        }
      case 8://見えない、遠い 
        CENTER();
        break;
    }
    if(get_timer(T3) >= 1000L && gAD[CN4] <= 700 && max_index != 4 && gAD[CN6] <= 700 && side == 0 && centerfunction == 0){
      cameraoff = 1;
      I = -70 + goaldistance;
      J = -70 + goaldistance;
      K = -70 + goaldistance;
      L = -70 + goaldistance;
    }
    /*if(nopixy == 1){
      pixy = 0;
    }
    if(pixy == 0){
      DIR();
    }else if(pixy == 1){*/
      Smalldiff = 10;
      DIR();
    /*}*/
    X = get_bno(0) - Y;
    if(X > 180){
      X = X - 360;
    }else if(X < -180){
       X = X + 360;
    }
    /*if(get_pixydat_x(1) <= 120){
      if(X > 0){
        I = MP * -1;
        J = MP;
        K = MP * -1;
        L = MP;
      }else if(X < 0){
        I = MP;
        J = MP * -1;
        K = MP;
        L = MP * -1;
      }
    }*/
    if(get_pixydat_x(1) == 0){
      if(lastpixy == 1){
        I = MP;
        J = 0;
        K = MP;
        L = 0;
      }else if(lastpixy == 2){
        I = 0;
        J = MP;
        K = 0;
        L = MP;
      }
    }
    J = J * 1.2;
    L = L * 1.2;
    set_Led(1, LED_OFF); 
    MOTOR();
  }
}