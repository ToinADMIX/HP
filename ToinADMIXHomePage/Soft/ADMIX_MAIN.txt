//ADMIX_MAIN
#include "D_Main.h"
#include "D_I2C.h"
#include "D_SIO.h"
#include "D_EIO.h"





//MOTOR
  //現在の出力
  int M0;
  int M1;
  int M2;
  int M3;

  //出力目標値
  int I;
  int J;
  int K;
  int L;

  //出力レベル
  int MP;//motorpower
  int LMP;//linemotorpower
  int MPlus;//比例足す値
  
  //シュート
  int goaldistance;
  float goalgain;

//DIR
  int A;//出力
  int B;//偏差の微分
  int C;//操作量C
  int N;//微分ゲイン
  float O;//操作量Aを割る定数
  int P;//比例ゲイン
  int V;//微分用の今回偏差の保存
  int X;//攻め方向と現在の向きの差
  int Y;//開始時攻め方向
  int Z;//現在の向き
  int Smalldiff;//許容誤差
  int pixy;//0で普通のDIR, 1でPIXYDIR
  int nopixy;//1でpixyを無視
  int lastpixy;
  int startdirection;
  float DIRPlus;
  int pixylist[5];
  int pixyindex;
  int pixysum;
  int pixyave;

//BALL
  int list[8];//ボルセン配列
  int max_index;//最大ボルセンindex
  int max_value;//最大ボルセン値
  int i;//for文
  int j;
  int k;

//LINE
  int linesafe;//0safe, 1out



/*
int LINE_MAIN(void){
  if (sub_io_get_gV(1, VAR_O) >= 50) {
    set_Led(1, LED_ON);
    return 0;
  }
  if (sub_io_get_gV(1, VAR_Q) >= 50) {
    set_Led(1, LED_ON);
    return 5;
  }
  if (sub_io_get_gV(1, VAR_R) >= 50) {
    set_Led(1, LED_ON);
    return 6;
  }
  if (sub_io_get_gV(1, VAR_M) >= 50) {
    set_Led(1, LED_ON);
    return 2;
  }
  if (sub_io_get_gV(1, VAR_N) >= 50) {
    set_Led(1, LED_ON);
    return 1;
  }
  if (sub_io_get_gV(1, VAR_P) >= 50) {
    set_Led(1, LED_ON);
    return 3;
  }
  else{
    set_Led(1, LED_OFF);
    return 4;
  }
}
*/








int DIR(void)
{
  DIRPlus = 0;
  while(TRUE){
    N = 55;//微分ゲイン
    P = 3;//比例ゲイン
    O = 4;//操作量Aを割る定数
    Z = get_bno(0); 
    X = Z - Y;
    if(X > 180){
      X = X - 360;
    }else if(X < -180){
       X = X + 360;
    }
    if(X > -1 * Smalldiff && X < Smalldiff){
      break;
    }else{
      B = V - X;
      V = X;
      A = P * X;
      C = N * B;
      DIRPlus = X * 0.04 + DIRPlus;
      A = A - C + DIRPlus;
      A = A / O;
      if(A < -100){
        A = -100;//操作量下限値
      }else if(A > 100){
        A = 100;//操作量上限値
      }
      /*if(A > 0 && A < 30){
        A = 30;
      }else if(A < 0 && A > -30){
        A = -30;
      }*/
      gPwm[0] = A < 0 ? (A * -1) | 0x80 : A;  
      gPwm[1] = A < 0 ? (A * -1) : A | 0x80;
      gPwm[2] = A < 0 ? (A * -1) : A | 0x80; 
      gPwm[3] = A < 0 ? (A * -1) : A | 0x80;  
      pwm_out();
      wait_ms(1);
    }
  }
}



int LINEMOTOR(void){
    set_Led(1, LED_ON);
    Smalldiff = 15;
    DIR();
    for(k = 0; k < 20; k++){
    gPwm[0] = I < 0 ? (I * -1) | 0x80 : I;
    gPwm[1] = J < 0 ? (J * -1) : J | 0x80;
    gPwm[2] = K < 0 ? (K * -1) | 0x80 : K;
    gPwm[3] = L < 0 ? (L * -1) | 0x80 : L;
    pwm_out();
    wait_ms(1);
    Smalldiff = 10;
    DIR();
    }
    return;
}



int LINE_MAIN(void){
  if (sub_io_get_gV(1, VAR_O) >= 50) {
        I = M0 = -1 * LMP;
        J = M1 = -1 * LMP;
        K = M2 = -1 * LMP;
        L = M3 = -1 * LMP;
        LINEMOTOR();
  }
  if (sub_io_get_gV(1, VAR_Q) >= 150) {
        I = M0 = -1 * LMP;
        J = M1 = LMP;
        K = M2 = -1 * LMP;
        L = M3 = LMP;
        LINEMOTOR();
  }
  if (sub_io_get_gV(1, VAR_R) >= 50) {
    set_Led(1, LED_ON);
        I = M0 = LMP;
        J = M1 = -1 * LMP;
        K = M2 = LMP;
        L = M3 = -1 * LMP;
        LINEMOTOR();
  }
  if (sub_io_get_gV(1, VAR_M) >= 100) {
        if(gAD[CN3] > gAD[CN7]){
          I = M0 = LMP;
          J = M1 = 0;
          K = M2 = LMP;
          L = M3 = 0; 
        }else if(gAD[CN7] > gAD[CN3]){
          I = M0 = 0;
          J = M1 = LMP;
          K = M2 = 0;
          L = M3 = LMP;
        }else{
          I = M0 = LMP;
          J = M1 = LMP;
          K = M2 = LMP;
          L = M3 = LMP;
        }
        LINEMOTOR();
  }
  if (sub_io_get_gV(1, VAR_N) >= 100) {
        if (sub_io_get_gV(1, VAR_Q) >= 200 || gAD[CN7] >= gAD[CN1]){
          I = M0 = -1 * LMP;
          J = M1 = LMP;
          K = M2 = -1 * LMP;
          L = M3 = LMP;
        }
        if(gAD[CN1] > gAD[CN7]){
          I = M0 = 50;
          J = M1 = 50;
          K = M2 = 50;
          L = M3 = 50;
        }
        LINEMOTOR();
  }
  if (sub_io_get_gV(1, VAR_P) >= 50) {
        if (sub_io_get_gV(1, VAR_R) >= 200 || gAD[CN3] >= gAD[CN1]){
          I = M0 = LMP;
          J = M1 = -1 * LMP;
          K = M2 = LMP;
          L = M3 = -1 * LMP;
        }
        if(gAD[CN1] > gAD[CN3]){
          I = M0 = 50;
          J = M1 = 50;
          K = M2 = 50;
          L = M3 = 50;
        }
        LINEMOTOR();
  }
  else{
    set_Led(1, LED_OFF);
  }
  return;
}





void PIXYDIR(void){
  DIRPlus = 0;
  while(TRUE){
    if(get_pixydat_x(1) == 0){
      Smalldiff = 15;
      DIR();
      break;
    }else{
      clr_timer(0);//見えてたらリセット
    }
    N = 180;//微分ゲイン
    P = 6;//比例ゲイン
    O = 25;//操作量Aを割る定数
    if(pixyindex >= 5){
      pixyindex = pixyindex - 5;
    }
    pixylist[pixyindex] = get_pixydat_x(1);
    pixyindex = pixyindex + 1;
    pixysum = 0;
    for(j = 0; j < 5; j++){
      pixysum = pixysum + pixylist[j];
    }
    pixyave = pixysum / 5;
    X = 160 - pixyave;
    if(X > -1 * Smalldiff && X < Smalldiff){
      break;
    }else{
      B = V - X;
      V = X;
      A = P * X;
      C = N * B;
      A = A - C;
      DIRPlus = X * 0.05 + DIRPlus;
      A = A + DIRPlus;
      A = A / O;
      if(A < -100){
        A = -100;//操作量下限値
      }else if(A > 100){
        A = 100;//操作量上限値
      }
      /*if(A > 0 && A < 30){
        A = 30;
      }else if(A < 0 && A > -30){
        A = -30;
      }*/
      gPwm[0] = A < 0 ? (A * -1) | 0x80 : A;  
      gPwm[1] = A < 0 ? (A * -1) : A | 0x80;
      gPwm[2] = A < 0 ? (A * -1) : A | 0x80; 
      gPwm[3] = A < 0 ? (A * -1) : A | 0x80;  
      pwm_out();
      wait_ms(1);
    }
  }
}





int BALL(void){
  list[0] = gAD[CN1];
  list[1] = gAD[CN2];
  list[2] = gAD[CN3];
  list[3] = gAD[CN4];
  list[4] = gAD[CN5];
  list[5] = gAD[CN6];
  list[6] = gAD[CN7];
  list[7] = gAD[CN8];
  if(list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7] <= 100){
    return 24;
  }
  max_value = list[0];
  max_index = 0;
  for (i = 0; i < 8; i++) {
    if (list[i] > max_value) {
      max_value = list[i];
      max_index = i;
    }
  }
  if(601 <= max_value && max_value <= 800){
    return max_index + 8;
  }else if(801 <= max_value){
     return max_index + 16;
  }else{
    return max_index;
  }
}





int MOTOR(void){
  if(I == M0 || I - M0 <= 20){
    M0 = I;
  }else{
    M0 = I/2;
  }
  if(J == M1 || J - M1 <= 20){
    M1 = J;   
  }else{
    M1 = J/2;
  }
  if(K == M2 || K - M2 <= 20){
    M2 = K;
  }else{
    M2 = K/2;
  }
  if(L == M3 || L - M3 <= 20){
    M3 = L;
  }else{
    M3 = L/2;
  }
  while (TRUE){
    gPwm[0] = M0 < 0 ? (M0 * -1) | 0x80 : M0;
    gPwm[1] = M1 < 0 ? (M1 * -1) : M1 | 0x80;
    gPwm[2] = M2 < 0 ? (M2 * -1) | 0x80 : M2;
    gPwm[3] = M3 < 0 ? (M3 * -1) | 0x80 : M3;
    pwm_out();
    wait_ms(1);
    if(I >= 0)//比例制御↓
      M0 = M0 < I ? (M0 + MPlus) : I;
    else
      M0 = M0 > I ? (M0 - MPlus) : I;
    if(J >= 0)
      M1 = M1 < J ? (M1 + MPlus) : J;
    else
      M1 = M1 > J ? (M1 - MPlus) : J;
    if(K >= 0)
      M2 = M2 < K ? (M2 + MPlus) : K;
    else
      M2 = M2 > K ? (M2 - MPlus) : K;
    if(L >= 0)
      M3 = M3 < L ? (M3 + MPlus) : L;
    else
      M3 = M3 > L ? (M3 - MPlus) : L;
    LINE_MAIN();
    /*switch(LINE_MAIN()){
      case 0:
        M0 = -1 * LMP;
        M1 = -1 * LMP;
        M2 = -1 * LMP;
        M3 = -1 * LMP;
        LINEMOTOR();
        break;
      case 1:
        Smalldiff = 15;
        DIR();
        if (sub_io_get_gV(1, VAR_Q) >= 200 || gAD[CN7] >= gAD[CN1]){
          M0 = -1 * LMP;
          M1 = LMP;
          M2 = -1 * LMP;
          M3 = LMP;
          break;
        }
        if(gAD[CN1] > gAD[CN7]){
          M0 = MP;
          M1 = MP;
          M2 = MP;
          M3 = MP;
          break; 
        }
        LINEMOTOR();
        break;
      case 2:
        Smalldiff = 15;
        DIR();
        if(gAD[CN3] > gAD[CN7]){
          M0 = LMP;
          M1 = 0;
          M2 = LMP;
          M3 = 0;
          break; 
        }else if(gAD[CN7] > gAD[CN3]){
          M0 = 0;
          M1 = LMP;
          M2 = 0;
          M3 = LMP;
          break; 
        }else{
          M0 = LMP;
          M1 = LMP;
          M2 = LMP;
          M3 = LMP;
          break;
        }
        LINEMOTOR();
        break;
      case 3:
        Smalldiff = 15;
        DIR();
        if (sub_io_get_gV(1, VAR_R) >= 200 || gAD[CN3] >= gAD[CN1]) {
          M0 = LMP;
          M1 = -1 * LMP;
          M2 = LMP;
          M3 = -1 * LMP;
          break;
        }
        if(gAD[CN1] > gAD[CN3]){
          M0 = MP;
          M1 = MP;
          M2 = MP;
          M3 = MP;
          break; 
        }
        LINEMOTOR();
        break;
      case 4:
        break;
      case 5:
        Smalldiff = 15;
        DIR();
        M0 = -1 * LMP;
        M1 = LMP;
        M2 = -1 * LMP;
        M3 = LMP;
        LINEMOTOR();
        break;
      case 6:
        Smalldiff = 15;
        DIR();
        M0 = LMP;
        M1 = -1 * LMP;
        M2 = LMP;
        M3 = -1 * LMP;
        LINEMOTOR();
        break;
    }*/
    if(I >= 0 && J >= 0){//目標値に到達↓
      if(M0 >= I && M1 >= J && M2 >= K && M3 >= L)
        break;
    }else if(I >= 0 && J < 0){
      if(M0 >= I && J >= M1 && M2 >= K && L >= M3)
        break;
    }else if(I < 0 && J >= 0){
      if(I >= M0 && M1 >= J && K >= M2 && M3 >= L)
        break;
    }else if(I < 0 && J < 0){
      if(I >= M0 && J >= M1 && K >= M2 && L >= M3)
        break;
    }
  }
}





/*void user_main(void){
  while(TRUE){
    PIXYDIR();
  }
}*/

void user_main(void){
  Y = get_bno(0);
  MP = 70;//モーターの出力
  LMP = 100;//ライン出力
  MPlus = 6;
  nopixy = 0;
  goalgain = 0.1;
  pixyindex = 0;
  while(TRUE){
    LINE_MAIN();
    DIRPlus = 0;
    /*if(get_timer(T1) > 3000L){
      nopixy = 1;//pixyを無視
    }*/
    pixy = 0;
    set_Led(1, LED_OFF);
    /*if(sub_io_get_gV(1, VAR_A) == 1){
      nopixy = 1;
    }else{
      nopixy = 0;
    }*/
    goaldistance = 320 * goalgain - get_pixydat_x(1) * goalgain;
    switch(BALL()){
      //遠
      case 0://前
        LINE_MAIN();
        Smalldiff = 15;
        I = MP;
        J = MP;
        K = MP;
        L = MP;
        break;
      case 1://右前
        LINE_MAIN();
        Smalldiff = 15;
        I = MP;
        J = 0;
        K = MP;
        L = 0;
        break;
      case 2://右
        LINE_MAIN();
        Smalldiff = 20;
        I = MP;
        J = MP * -1;
        K = MP;
        L = MP * -1;
        break;
      case 3://右後
        LINE_MAIN();
        Smalldiff = 25;
        I = 0;
        J = MP * -1;
        K = 0;
        L = MP * -1;
        break;
      case 4://後
        LINE_MAIN();
        Smalldiff = 30;
        I = MP * -1;
        J = MP * -1;
        K = MP * -1;
        L = MP * -1;
        break;
      case 5://左後
        LINE_MAIN();
        Smalldiff = 25;
        I = MP * -1;
        J = 0;
        K = MP * -1;
        L = 0;
        break;
      case 6://左
        LINE_MAIN();
        Smalldiff = 20;
        I = MP * -1;
        J = MP;
        K = MP * -1;
        L = MP;
        break;
      case 7://左前
        LINE_MAIN();
        Smalldiff = 15;
        I = 0;
        J = MP;
        K = 0;
        L = MP;
        break;
        
        
        
      //普通
      case 8://前
        LINE_MAIN();
        Smalldiff = 15;
        I = MP;
        J = MP;
        K = MP;
        L = MP;
        break;
      case 9://右前
        LINE_MAIN();
        Smalldiff = 15;
        I = MP;       
        J = -1 * MP;
        K = MP;
        L = -1 * MP;
        break;
      case 10://右
        LINE_MAIN();
        Smalldiff = 20;
        I = 0;
        J = MP * -1;
        K = 0;
        L = MP * -1;
        break;
      case 11://右後
        LINE_MAIN();
        Smalldiff = 25;
        I = MP * -1;
        J = MP * -1;
        K = MP * -1;
        L = MP * -1;
        break;
      case 12://後
        LINE_MAIN();
        Smalldiff = 30;
        if(gAD[CN4] >= gAD[CN6]){
          I = MP * -1;
          J = MP;
          K = MP * -1;
          L = MP;
          break;
        }else if(gAD[CN6] > gAD[CN4]){
          I = MP;
          J = MP * -1;
          K = MP;
          L = MP * -1;
          break;
        }
      case 13://左後
        LINE_MAIN();
        Smalldiff = 25;
        I = MP * -1;
        J = MP * -1;
        K = MP * -1;
        L = MP * -1;
        break;
      case 14://左
        LINE_MAIN();
        Smalldiff = 20;
        I = MP * -1;
        J = 0;
        K = MP * -1;
        L = 0;
        break;
      case 15://左前
        LINE_MAIN();
        Smalldiff = 15;
        I = MP * -1;
        J = MP;
        K = MP * -1;
        L = MP;
        break;
      //近
      case 16://前
        LINE_MAIN();
        Smalldiff = 15;
        I = MP;
        J = MP;
        K = MP;
        L = MP;
        break;
      case 17://右前
        LINE_MAIN();
        Smalldiff = 15;
        I = 0;
        J = MP * -1;
        K = 0;
        L = MP * -1;
        break;
      case 18://右
        LINE_MAIN();
        Smalldiff = 20;
        I = MP * -1;
        J = MP * -1;
        K = MP * -1;
        L = MP * -1;
        break;
      case 19://右後
        LINE_MAIN();
        Smalldiff = 25;
        I = MP * -1;
        J = MP * -1;
        K = MP * -1;
        L = MP * -1;
        break;
      case 20://後
        LINE_MAIN();
        Smalldiff = 30;
        if(gAD[CN4] >= gAD[CN6]){
          I = MP * -1;
          J = MP;
          K = MP * -1;
          L = MP;
          break;
        }else if(gAD[CN6] > gAD[CN4]){
          I = MP;
          J = MP * -1;
          K = MP;
          L = MP * -1;
          break;
        }
      case 21://左後
        LINE_MAIN();
        Smalldiff = 25;
        I = MP * -1;
        J = MP * -1;
        K = MP * -1;
        L = MP * -1;
        break;
      case 22://左
        LINE_MAIN();
        Smalldiff = 20;
        I = MP * -1;
        J = MP * -1;
        K = MP * -1;
        L = MP * -1;
        break;
      case 23://左前
        LINE_MAIN();
        Smalldiff = 15;
        I = MP * -1;
        J = 0;
        K = MP * -1;
        L = 0;
        break;
      case 24://見えない
        LINE_MAIN();
        Smalldiff = 10;
        I = -50;
        J = -50;
        K = -50;
        L = -50;
        break;
    }

    /*if(nopixy == 1){
      pixy = 0;
    }*/
    /*I = I * 1;
    J = J * 1.2;
    K = K * 1.05;
    L = L * 1;
    I = I * 1.07;
    J = J * 1.07;*/
    if(get_pixydat_w(1) <= 60){
      Smalldiff = Smalldiff + 10;
      DIR();
    }else if(61 <= get_pixydat_w(1)){
      Smalldiff = 40;
      PIXYDIR();
    }
    LINE_MAIN();
    /*J = J * 1.3;
    L = L * 0.7;*/
    MOTOR();
  }
}