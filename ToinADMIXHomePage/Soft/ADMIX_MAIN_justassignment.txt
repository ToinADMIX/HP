//ADMIX_MAIN_justassignment
#include "D_Main.h"
#include "D_I2C.h"
#include "D_SIO.h"
#include "D_EIO.h"

//現在のモーター出力
int M0;
int M1;
int M2;
int M3;

int MOTOR(int I, int J, int K, int L){//出力目標値
  if(I == M0){
    M0 = I;
  }
  if(J == M1){
    M1 = J;   
  }
  if(K == M2){
    M2 = K;
  }
  if(L == M3){
    M3 = L;
  }else{
    M0 = I/2;
    M1 = J/2;
    M2 = K/2;
    M3 = L/2;
  }
  while (TRUE){
    gPwm[0] = M0 < 0 ? (M0 * -1) | 0x80 : M0;
    gPwm[1] = M1 < 0 ? (M1 * -1) | 0x80 : M1;
    gPwm[2] = M2 < 0 ? (M2 * -1) | 0x80 : M2;
    gPwm[3] = M3 < 0 ? (M3 * -1) | 0x80 : M3;
    pwm_out();
    wait_ms(1);
    if(I >= 0)
      M0 = M0 < I ? (M0 + 1) : I;
    else
      M0 = M0 > I ? (M0 - 1) : I;
    if(J >= 0)
      M1 = M1 < J ? (M1 + 1) : J;
    else
      M1 = M1 > J ? (M1 - 1) : J;
    if(K >= 0)
      M2 = M2 < K ? (M2 + 1) : K;
    else
      M2 = M2 > K ? (M2 - 1) : K;
    if(L >= 0)
      M3 = M3 < L ? (M3 + 1) : L;
    else
      M3 = M3 > L ? (M3 - 1) : L;
    if(I >= 0){
      if(M0 >= I && M1 >= J && M2 >= K && M3 >= L)
        break;
    }else if(I < 0){
      if(I >= M0 && J >= M1 && K >= M2 && L >= M3)
        break;
    }
  }
}

int BALL(void){
  int list[8];
  int max_value;
  int max_index;
  int i;
  list[0] = gAD[CN1];
  list[1] = gAD[CN2];
  list[2] = gAD[CN3];
  list[3] = gAD[CN4];
  list[4] = gAD[CN5];
  list[5] = gAD[CN6];
  list[6] = gAD[CN7];
  list[7] = gAD[CN8];
  if(list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7] <= 100){
    return 16;
  }
  max_value = list[0];
  max_index = 0;
  for (i = 0; i < 8; i++) {
    if (list[i] > max_value) {
      max_value = list[i];
      max_index = i;
    }
  }
  if(max_value >= 950){
    return max_index + 8;
  }else{
    return max_index;
  }
}

int LINE_MAIN(void){
  if (sub_io_get_gV(1, VAR_M) >= 30) {
    set_Led(1, LED_ON);
    return 0;
  }
  if (sub_io_get_gV(1, VAR_N) >= 30) {
    set_Led(1, LED_ON);
    return 1;
  }
  if (sub_io_get_gV(1, VAR_O) >= 30) {
      set_Led(1, LED_ON);
    return 2;
  }
  if (sub_io_get_gV(1, VAR_P) >= 30) {
      set_Led(1, LED_ON);
    return 3;
  }
  else{
    set_Led(1, LED_OFF);
    return 4;
  }
}

int DIR(int N, int O, int P, int Y)
{
  int A;
  int B;
  int C;
  int V;
  int X;
  int Z;
  while(TRUE){
    Z = get_bno(0);//現在の向き
    X = Z - Y;//差
    if(X > 180){
      X = X - 360;
    }else if(X < -180){
       X = X + 360;
    }
    if(X <= 10 || X >= -10){
      return 0;
    }
    B = X - V;//偏差の微分
    V = X;//微分用の今回偏差の保存
    A = P*X;//操作量A＝比例ゲイン×偏差
    C = N*B;//操作量C＝微分ゲイン×偏差の微分値
    A = A + C;//操作量＝操作量A+操作量C
    A = A/O;//定数Oで割る
    if(A < -100){
      A = -100;//操作量下限値
    }else if(A > 100){
      A = 100;//操作量上限値
    }else{
    }
    if(A > 0　&& A < 20){
      A = 20;
    }else if(A < 0 && A > -20){
      A = -20;
    }
    gPwm[0] = A < 0 ? (A * -1) : A | 0x80;  
    gPwm[1] = A < 0 ? (A * -1) : A | 0x80; 
    gPwm[2] = A < 0 ? (A * -1) : A | 0x80; 
    gPwm[3] = A < 0 ? (A * -1) : A | 0x80;    
    pwm_out();
  }
}

void user_main(void){
  int I;
  int J;
  int K;
  int L;
  int N;
  int O;
  int P;
  int Y;
  N = 3;//微分ゲイン
  O = 50;//操作量Aを割る定数
  P = 2;//比例ゲイン
  Y = get_bno(0);//攻め方向
  while(TRUE){
    switch(BALL()){
      //遠
      case 0://前
        I, J, K, L = 70, 70, 70, 70;
        break;
      case 1://右前
        I, J, K, L = 70, 0 , 70, 0;
        break;
      case 2://右
        I, J, K, L = 70, -70, 70, -70;
        break;
      case 3://右後
        I, J, K, L = 0, -70, 0, -70;
        break;
      case 4://後
        I, J, K, L = -70, -70, -70, -70;
        break;
      case 5://左後
        I, J, K, L = -70, 0, -70, 0;
        break;
      case 6://左
        I, J, K, L = -70, 70, -70, 70;
        break;
      case 7://左前
        I, J, K, L = 0, 70, 0, 70;
        break;
      //近
      case 8://前
        I, J, K, L = 80, 80, 80, 80;
        break;
      case 9://右前
        I, J, K, L = 70, -70, 70, -70;
        break;
      case 10://右
        I, J, K, L = 0, -70, 0, -70;
        break;
      case 11://右後
        I, J, K, L = -70, -70, -70, -70;
        break;
      case 12://後
        I, J, K, L = -70, 0, -70, 0;
        break;
      case 13://左後
        I, J, K, L = -70, -70, -70, -70;
        break;
      case 14://左
        I, J, K, L = -70, 0, -70, 0;
        break;
      case 15://左前
        I, J, K, L = -70, 70, -70, 70;
        break;
      case 16://見えない
        I, J, K, L = 0, 0, 0, 0;
        break;
    }
    switch(LINE_MAIN()){
      case 0://前
        I, J, K, L = 70, 70, 70, 70;
        break;
      case 1://左
        I, J, K, L = -70, 70, -70, 70;
        break;
      case 2://後
        I, J, K, L = -70, -70, -70, -70;
        break;
      case 3://右
        I, J, K, L = 70, -70, 70, -70;
        break;
      case 4://踏んでねぇよ
        break;
    }
    MOTOR(I, J, K, L);
    DIR(N, O, P, Y);
  }
}